{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","Textform","useState","text","setText","style","color","heading","backgroundColor","value","rows","onChange","event","target","upperText","toUpperCase","showAlert","lowerText","toLowerCase","i","capitalize","split","length","j","newText","join","document","getElementById","select","navigator","clipboard","writeText","arr","count","wordCounter","Alert","alert","msg","defaultProps","about","App","setAlert","message","setTimeout","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f3d87fb0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode === 'light' ? 'light' : 'dark'}`}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/ \">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            {/* instead of a & href , link and to is used to that we transition from one page toa nother without page reload */}\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/ \">Home</Link> */}\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about \">{props.about}</Link>\r\n                            </li> */}\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-light\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"  >Enable {props.mode === 'dark' ? 'light' : 'dark'} Mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav >\r\n        </div >\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,// therefore if you enter a numbner in title in app.js it will show an error\r\n    about: PropTypes.string\r\n    // isRequired : if no tilte is aprovided in app.js and also ther is no default title then it wll give an error\r\n}\r\n// in case if in app.js tilte name is not provided and this value will be used as default\r\nNavbar.defaultProps = {\r\n    title: 'Set tilte here',\r\n    about: ' About  '\r\n}","import React, { useState } from 'react'// react hook\r\nexport default function Textform(props) {\r\n\r\n\r\n\r\n    const [text, setText] = useState(\"\")\r\n    //  text = \"new text\" // wrong way to change the state\r\n    //setText(\"new Text \");// correct way to change the state\r\n    const UppercaseClicked = () => {\r\n        //console.log(\"uppercase btn clicked\");\r\n        let upperText = text.toUpperCase();\r\n        setText(upperText);\r\n        props.showAlert(\"Converted to UpperCase\", 'success')\r\n    }\r\n    const LowercaseClicked = () => {\r\n        let lowerText = text.toLowerCase();\r\n        setText(lowerText);\r\n        props.showAlert(\"Converted to LowerCase\", 'success')\r\n    }\r\n    const RemoveExtraSpacesClicked = () => {\r\n        let arr = text.split(/[ ]+/);\r\n        let newText = arr.join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"Extra Spaces removed\", 'success')\r\n    }\r\n    const CopyTextClicked = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied\", 'success')\r\n    }\r\n    const CapitalizeClicked = () => {\r\n        var i = 0;\r\n        var capitalize = \"\";\r\n        for (i = 0; i < text.split(\" \").length; i++) {\r\n            for (let j = 0; j < text.split(\" \")[i].length; j++) {\r\n                if (j === 0) {\r\n                    capitalize += text.split(\" \")[i][j].toUpperCase();\r\n                }\r\n                else {\r\n                    capitalize += text.split(\" \")[i][j];\r\n                }\r\n            }\r\n            capitalize += \" \"\r\n        }\r\n        setText(capitalize);\r\n        props.showAlert(\"Text capitalized\", 'success')\r\n    }\r\n    const ResetClicked = () => {\r\n        setText(\"\");\r\n        props.showAlert(\"Text cleared\", 'success')\r\n    }\r\n\r\n    // it is imp to listen to onChange to write in textarea\r\n    const handleOnChange = (event) => { // on making any change to the textarea it will be triggered\r\n        //console.log(\"handleOnChange \");\r\n        setText(event.target.value);// now you will be able to write on textarea\r\n    }\r\n    const wordCounter = (text) => {\r\n        let arr = text.split(\" \");\r\n        let count = 0;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i] !== \" \") {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n\r\n                    <textarea className=\"form-control\" style={{ backgroundColor: props.mode === 'dark' ? 'black' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} value={text} id=\"myBox\" rows=\"5\" onChange={handleOnChange}></textarea>\r\n                </div>{/*in above style one curly bracket aaas we are writing in js and second as we ae makinga an object*/}\r\n                <button className={`btn btn-warning mx-2`} onClick={UppercaseClicked}>Convert to Uppercase</button>\r\n                <button className={`btn btn-warning mx-2`} onClick={LowercaseClicked}>Convert to Lowercase</button>\r\n                <button className={`btn btn-warning mx-2`} onClick={CapitalizeClicked}>Capitalize text</button>\r\n                <button className=\"btn btn-info mx-2\" onClick={RemoveExtraSpacesClicked}>Remove Extraspaces </button>\r\n                {/* <button type=\"button\" className=\"btn btn-success mx-2 popoverBtn\" onClick={CopyTextClicked} data-bs-container=\"body\" data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-content=\"Text copied\">Copy Text</button>\r\n                <button type=\"button\" className=\"btn btn-danger mx-2 popoverBtn\" onClick={ResetClicked} data-bs-container=\"body\" data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-content=\"Text cleared\">Reset Text</button> */}\r\n                <button className=\"btn btn-success mx-2\" id=\"copyTextBtn\" onClick={CopyTextClicked}>Copy Text</button>\r\n                <button className=\"btn btn-danger mx-2\" onClick={ResetClicked}>Reset</button>\r\n            </div>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2><u>Your text summary</u></h2><br></br>\r\n                <p><i>Your text has : {wordCounter(text)} words and {text.length} character</i></p>\r\n                <h2><u>Text preview</u></h2>\r\n                <p><i>{text.length > 0 ? text : \"Write something in the textbox above to preview it here...\"}</i></p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        // to prevent error =\"cannot read property of null \" we need to use \"props.alert &&\" the end operator will ensure that 2nd argument that is div wala is read only when prop.alert!= false   \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n            <strong>{props.alert.type.toUpperCase()}</strong> : {props.alert.msg}\r\n        </div >\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\nfunction App() {\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500)\n  }\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = \"black\";\n      document.title = \"Textutils-Dark Mode\"\n      showAlert(\"Dark mode has been enabled\", 'success');\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      document.title = \"Textutils-Light Mode\"\n      showAlert(\"Light mode has been enabled\", 'success');\n    }\n  }\n  return (\n    <>  {/* Jsx framwork tko include multiple tag at same level*/}\n\n      {/* <Router>\n        <Navbar mode={mode} toggleMode={toggleMode} title=\"Textutils\" />\n        <Alert alert={alert} />\n\n        <div className=\"container my-3\">\n\n\n          <Routes>\n            <Route exact path=\"/\" element={<Textform showAlert={showAlert} mode={mode} heading=\"Enter text to be analyzed..\" />} />\n            <Route exact path=\"/about\" element={<About />} />\n          </Routes>\n        </div>\n      </Router> */}\n      {/* reacts uses partial matching for path and thus imp to specifiy exact path if we want same */}\n\n      <Navbar mode={mode} toggleMode={toggleMode} title=\"TextUtils\" />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Textform showAlert={showAlert} mode={mode} heading=\"Enter text to be analyzed..\" />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}